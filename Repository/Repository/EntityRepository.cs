/*
The next code was generated by Repository Pattern Generator.
Be free to modify this file.

This extension was developed and designed by Francisco López Sánchez.
*/

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using Repository.ViewModels;
using Repository.Helpers;
using System.Reflection;
using System.Collections.ObjectModel;

namespace Repository.Repository
{
    public class EntityRepository<TModel, TViewModel> : IRepository<TModel, TViewModel> where TModel : class where TViewModel : IViewModel<TModel>, new()
    {
        private readonly DbContext _context;

        protected virtual DbSet<TModel> DbSet
        {
            get
            {
                return _context.Set<TModel>();
            }
        }

        public EntityRepository(DbContext context)
        {
            this._context = context;
        }

        public virtual ICollection<TViewModel> Get()
        {
            var list = new List<TViewModel>();
            foreach (var model in DbSet)
            {
                var vm = new TViewModel();
                vm.FromModel(model);
                list.Add(vm);
            }

            return list;
        }

        public virtual TViewModel Get(params object[] keys)
        {
            var data = DbSet.Find(keys);
            if (data == null)
                return default(TViewModel);

            var vm = new TViewModel();
            vm.FromModel(data);

            return vm;
        }

        public Expression<Func<TModel, TNewKey>> Convert<TNewKey>(MemberExpression expression, ReadOnlyCollection<ParameterExpression> parameterExpressions)
        {
            return Expression.Lambda<Func<TModel, TNewKey>>(expression, parameterExpressions);
        }

        public IQueryable<TModel> GetSpecific<TOrderBy>(Expression<Func<TModel, bool>> where, int? skip, int? take, Expression<Func<TModel, TOrderBy>> orderBy = null, bool? orderAsc = null)
        {
            var query = DbSet.Where(where);

            if (orderBy == null)
                return query;

            if (orderAsc == null)
                query = query.OrderBy(orderBy);
            else if (orderAsc.Value)
                query = query.OrderBy(orderBy);
            else
                query = query.OrderByDescending(orderBy);

            if (skip != null)
                query = query.Skip(skip.Value);

            if (take != null)
                query = query.Take(take.Value);

            return query;
        }

        public virtual ICollection<TViewModel> Get(Expression<Func<TModel, bool>> where, Expression<Func<TModel, object>> orderBy = null, bool? orderAsc = null, int? skip = null, int? take = null)
        {
            IQueryable<TModel> queryData;

            if (orderBy != null)
            {
                var propertyAccessExpression = new ExpressionHelper().GetPropertyAccessExpression(orderBy);
                var propertyInfo = (PropertyInfo)propertyAccessExpression.Member;

                var covertMethod = GetType().GetMethod("Convert").MakeGenericMethod(propertyInfo.PropertyType);
                var getOrderedMethod = GetType().GetMethod("GetSpecific").MakeGenericMethod(propertyInfo.PropertyType);

                var newExpression = covertMethod.Invoke(this, new object[] { propertyAccessExpression, orderBy.Parameters });
                queryData = (IQueryable<TModel>)getOrderedMethod.Invoke(this, new[] { where, skip, take, newExpression, orderAsc });
            }
            else
                queryData = GetSpecific<object>(where, null, null);

            var data = new List<TViewModel>();

            foreach (var model in queryData)
            {
                var obj = new TViewModel();
                obj.FromModel(model);
                data.Add(obj);
            }

            return data;
        }

        public virtual int Count(Expression<Func<TModel, bool>> where = null)
        {
            return where != null ? DbSet.Where(where).Count() : DbSet.Count();
        }

        public virtual TViewModel Add(TViewModel model)
        {
            var m = model.ToModel();
            var addedModel = DbSet.Add(m);
            try
            {
                _context.SaveChanges();
                model.FromModel(addedModel);
                return model;
            }
            catch (Exception)
            {
                return default(TViewModel);
            }
        }

        public virtual int Update(TViewModel model)
        {
            var obj = DbSet.Find(model.GetKeys());
            model.UpdateModel(obj);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public virtual int Delete(Expression<Func<TModel, bool>> where)
        {
            var data = DbSet.Where(where);
            DbSet.RemoveRange(data);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public virtual int Delete(params object[] keys)
        {
            var data = DbSet.Find(keys);
            DbSet.Remove(data);
            try
            {
                return _context.SaveChanges();
            }
            catch (Exception)
            {
                return 0;
            }
        }
    }
}