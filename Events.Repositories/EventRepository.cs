//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Events.EF;
using Events.Entities;
using Events.Common;

namespace Events.Repositories
{
	public partial class EventRepository : Repository<Event>
	{
	
		public EventRepository(DbContext ctx, bool noTracking = true) : base(ctx, noTracking)
		{
		}
			
			
		public IEnumerable<Event> FetchAllEvents(params Expression<Func<Event, object>>[] paths)
		{
			return _iRepository.FetchAll(paths);
		}
	
		public IEnumerable<Event> FetchAllEvents(Func<IQueryable<Event>, IOrderedQueryable<Event>> orderBy, int pageSize, int pageNumber, params Expression<Func<Event, object>>[] paths)
		{
	        return _iRepository.FetchAll(orderBy, pageSize, pageNumber, paths);
		}
	
		public IEnumerable<Event> FetchManyEvents(Expression<Func<Event, bool>> predicate, params Expression<Func<Event, object>>[] paths)
		{
			return _iRepository.FetchMany(predicate, paths);
		}
	
	    public IEnumerable<Event> FetchManyEvents(Expression<Func<Event, bool>> predicate, Func<IQueryable<Event>, IOrderedQueryable<Event>> orderBy, int pageSize, int pageNumber, params Expression<Func<Event, object>>[] paths)
	    {
	        return _iRepository.FetchMany(predicate, orderBy, pageSize, pageNumber, paths);
	    }
	
		public Event FetchEvent(Expression<Func<Event, bool>> predicate, params Expression<Func<Event, object>>[] paths)
		{
			return _iRepository.Fetch(predicate, paths);
		}
	
		
	
		public Event FetchEvent(params object[] keys)
		{
			return _iRepository.Fetch(keys);
		}
	
		
	
		public IEnumerable<Event> SqlQuery(string esqlText, object[] Parameters)
		{
			return _iRepository.SqlQuery(esqlText, Parameters);
		}
	
		public void AddEvent(Event entity)
		{
			 _iRepository.Add(entity);
		}
	
		
	
		public void UpdateEvent(Event entity)
		{
			 _iRepository.Update(entity, e => e.Id == entity.Id);
		}
	
		
	
		public void DeleteEvent(Event entity)
		{
			 _iRepository.Delete(entity, e => e.Id == entity.Id);
		}
	
		
	
	}
	
}
